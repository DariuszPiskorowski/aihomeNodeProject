name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # manual trigger
  schedule:
    - cron: '0 0 * * 0' # weekly schedule on Sunday at 00:00

jobs:           # ESLint
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: npm install
    - name: Set execute permission for node_modules/.bin/eslint
      run: chmod +x node_modules/.bin/eslint
    - name: Run ESLint
      run: npm run lint

  security:     # npm security audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: npm install
    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Set up Trivy
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'table'

    - name: Scan repository
      run: trivy fs .

  
  test:
    needs: [lint, security, ]  
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 21.x]
        browser: [chrome, firefox] # popular browsers tests
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: npm install
    - name: Install Selenium WebDriver
      run: npm install selenium-webdriver
    - name: Set up Selenium
      run: |
        curl -O https://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jar
        java -jar selenium-server-standalone-3.141.59.jar &
    - name: Run Selenium tests
      run: |
        node selenium-tests.js ${{ matrix.browser }} 

  package:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Package Application
      run: tar -czvf application-${{ github.sha }}.tar.gz .
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: application-${{ github.run_number }}
        path: application-${{ github.sha }}.tar.gz

  create-release:
    needs: package
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./application-${{ github.sha }}.tar.gz
          asset_name: application-${{ github.sha }}.tar.gz
          asset_content_type: application/gzip

  docker:
    needs: [lint, security, test]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      uses: docker/build-push-action@v3
      with:
        context: .
        push: true
        tags: |
          sonixh/aihome-my-web-server:${{ github.sha }}
          sonixh/aihome-mqtt-influx-bridge:${{ github.sha }}
          sonixh/aihome-influxdb:${{ github.sha }}
          sonixh/aihome-mosquitto:${{ github.sha }}