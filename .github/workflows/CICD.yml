name: CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:  # manual trigger
  schedule:
    - cron: '0 0 * * 0' # weekly schedule on Sunday at 00:00

jobs:           # ESLint - code integrity
  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: npm install
    - name: Set execute permission for node_modules/.bin/eslint
      run: chmod +x node_modules/.bin/eslint
    - name: Run ESLint
      run: npm run lint

  security:     # npm security audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install dependencies
      run: npm install
    - name: Run security audit
      run: npm audit --audit-level=moderate

    - name: Install Trivy   #  Trivy test for Docker images
      run: |
        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
        sudo apt-get update
        sudo apt-get install trivy

    - name: Scan repository
      run: trivy fs .

  
  test:
    needs: [lint, security]  # Selenium tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x, 21.x]
        browser: [chrome, firefox] # most popular browsers tests
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
    - name: Install dependencies
      run: npm install
    - name: Install Selenium WebDriver
      run: npm install selenium-webdriver
    - name: Set up Selenium
      run: |
        curl -O https://selenium-release.storage.googleapis.com/3.141/selenium-server-standalone-3.141.59.jar
        java -jar selenium-server-standalone-3.141.59.jar &
    - name: Run Selenium tests
      run: |
        node selenium-tests.js ${{ matrix.browser }} 

  docker:
    needs: [lint, security, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Pull and Tag External Images
        run: |
            docker pull eclipse-mosquitto
            docker pull influxdb
            docker tag influxdb sonixh/aihome:influxdb
            docker tag eclipse-mosquitto sonixh/aihome:eclipse-mosquitto
      
      - name: Display files in working directory for debugging
        run: ls -alh

      - name: Build Docker images
        run: docker-compose -f docker-compose.yml build

      - name: Display Docker images
        run: docker images

      - name: Login to DockerHub (again)  # just in case all jobs are take too long
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Push Docker images
        run: |
          docker push sonixh/aihome:my-web-server
          docker push sonixh/aihome:mqtt-influx-bridge
          docker push sonixh/aihome:influxdb
          docker push sonixh/aihome:eclipse-mosquitto

  deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
        - name: Deploy to production server
          env:
            DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
            DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          run: |
            ssh user@boss-laptop 'curl -o docker-compose.yml https://raw.githubusercontent.com/DariuszPiskorowski/aihomeNodeProject/master/docker-compose.yml && echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin && docker-compose pull && docker-compose up -d'